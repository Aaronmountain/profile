{
  "pokemon": [
    "1. 依照所需工具架設環境同時思考元件切割，一開始只分 List 和 pokemonPage 兩個   component，reducer 一個以上，先創建Store，在最終render的根元件先套上 redux 和 router 的 provider and HashRouter。",
    "2. 開始架設 router，設置元件的網址。接下來正式動工，首先從 List 開始，FetchAPI、設立 action、reducer、initState，傳遞到 Store 等",
    "3. 使用 react-redux 所提供的 useDispatch和 useSlecetor 來使用我們所創建好的 Store 了，pagination 則使用了 react-pagination 的套件製作，因此總數1118筆神奇寶貝的資訊都順利呈現到網頁上了，做到這裡已經差不多了，開始檢查程式碼及思考如何改善",
    "4. 一開始把全部26個字母做成分類按鈕，利用修改 action 物件，將首字母分類資訊傳遞給  reducer 的 state 中，做成分類按鈕及搭配判斷來產出分類頁面，減少了元件內凌亂的程式碼",
    "5. 此時想再新增 ALL category 按鈕，這裡試著用剛剛的方法來做的話一樣導致元件變得很複雜，因此這裡改用 pagination 套件裡的 pageChange 函式，再利用原先的 useRef 放置最上方先執行只要點擊時就會回到完整的頁面。",
    "6.由於當初只有分兩個元件，但此時 List 元件內部其實還是有點複雜，因此這裡把剛剛生產的按鈕和原本 searchInput 的區塊再切割出去",
    "困難點: a. 整理程式碼過程中其實遇到蠻多問題的，分類按鈕的製作一開始使用 useState 來製作的話又因為使用很多 HOOK 和函式和迴圈，將分類按鈕製作完畢後又要思考判斷如何渲染出該分類的頁面。",
    "b. 製作全部種類按鈕的時候，又因為再次以更改 reducerState 來製作反而導致 action 物件和 reducer 內部變得很複雜，因此改成將這個 hadler 與 pagination 結合，同時又遇到如何紀錄當前頁面及頁面切換時會有空白頁的出現等問題。"
  ],
  "ecommce": [
    "首頁: 利用共用的 CSS 取名為: container、col、row 等，搭配 HTML 標籤來快速配置版面和RWD。動畫利用 hover、transform、transition、filter、before、after...等手法。",
    "產品頁: 將商品資訊放入頁面、為動態加入的按鈕添加點擊事件以顯示按鈕各自的商品項目、確認資料庫用以顯示購物車 Icon 中的數量、為Menu 添加點擊事件等。",
    "單品頁: 尺寸的選擇、數量選擇，確保 input 和 size 都有選擇後才送資料到資料庫、Input的選擇不得為負數、相片和按鈕的點擊事件、顯示添加至購物車後的動畫訊息。",
    "購物車頁: loading 狀態前先確認資料庫、為清除、購買、input 等添加點擊事件、計算購物車的總價錢、購物車數量為零時顯示動畫文字訊息。",
    "困難點:a. 原先的頁面其實是之前練習的切版網站，重購 HTML 標籤還好但再處理畫面和如何送資料讀取資料及刪除更新資料的時候遇到蠻多問題，特別是因為整合起來的時候會要判斷很多東西，就一直不斷的嘗試各種方法。",
    "b. 連結多個不同頁面時，要將商品資訊放到購物車，原本切版練習時是將商品以模板字符串寫死的，現在大改的時候，因此會添加很多細節，像是商品頁面的 id、src、title...等多出了三四種資訊是要放入資料庫，再從購物車中讀取並寫入 HTML 中，每添加一個資訊後回到購物車創建 HTML 時發現好像還少了某些資訊，因此又回去商品頁面新增新資訊。",
    "c. 每次測試網站的時候，其時會遇到很多細節，也因此就不斷地修改，像是 input 輸入的同時要更新資料庫中商品資訊、希望 input 購入後將 input 數量歸零 reset、判斷尺寸和數量都有輸入不然會彈出屬於各自的提醒框......等。"
  ],
  "calendar": [
    "先設置初始化函式，每次換月份時，其實就是重新渲染每個月的天數。製作過程皆以這個月1號為基準。",
    "1. 這個月，利用迴圈搭配 Date 物件取出年月日星期，每渲染一個格子放入 HTML 標籤中後日期就+1，將這個月的日期從1號依序渲染到最後一號，但此時畫面上是不完整的，因為不包含上個月後幾天和下個月前幾天。",
    "2. 上個月後幾天，以這個月1號為標準往回推算到禮拜天就會是上個月的後幾天。",
    "3. 下個月前幾天，利用目前這個月的最後一天一直渲染到禮拜天就會是下個月的前幾天，由於禮拜天(索引0)，因此取 getDay()>0 就可以渲染下個月最幾天了。",
    "4. 參考了 window 內建的月曆，取出已渲染的日期數量進行判斷搭配迴圈及 getDay() 來繼續渲染再下一個禮拜的日期。這樣就能保持都是同樣體積的正方形(月曆的形狀)。",
    "5. 為切換月份的按鈕添加點擊事件。",
    "6. 整理程式碼。",
    "困難點: a. 主要卡在上個月後幾天的邏輯，首先知道禮拜天索引是0，但如何利用 getDate() ，這個月的1號來渲染出上個月後幾面"
  ],
  "snake-game": [
    "因貪吃蛇需不斷即時更新畫面，因此利用呼叫 window.requestAnimationFrame()，並在  callback 內部再次呼叫 AnimationFrame ，開始循環不斷渲染最新的狀態。",
    "1. 蛇的身體、身體的位置、蛇的走向，陣列包覆物件來設置蛇的身體，身體的位置則利用將前一個的索引位置解構給後一個索引位置，蛇的走向即鍵盤事件。",
    "2. 蛇食物、蛇生長及更新食物位置，判斷蛇的頭部和食物重疊時代表吃到食物返回布林值，並依此定義長身體，一次只能長一格，利用 Math 中的方法更新食物位置。",
    "3. 蛇的死亡，蛇只要碰到牆壁或吃自己的時候就會死亡，判斷蛇的頭部座標和蛇身體座標是否重疊。",
    "困難點:a. 蛇長身體的邏輯，用遞減的迴圈，加上每生長一次就要產生最後一格身體，而最後一格身體又要取代掉上一個的最後一格身體。",
    "b. 因為把蛇的走向放進用來產生蛇身體位置排序的迴圈中，導致蛇的身體是不完整的且鍵盤事件也因此而產生失效的情況。",
    "c. 蛇吃自己導致死亡這裡，一開始一直不懂這個邏輯，頭也是身體一部分，再將原本只是比較身體食物是否重疊的函式，添加新變數，而變數以物件設置預設值，因此當初也看得懵懵懂懂查了很多資料，促使我在後面學習 React 的時候對於解構和預設值能夠順利上手。"
  ],
  "web-rtc": [
    "左邊為視訊區塊，右邊為聊天室",
    [
      "使用技術：",
      "前端： HTML5, TailwindCSS, javaScript",
      "後端： NodeJs, Express, WebSokcet, WebRtc"
    ],
    [
      "專案過程：",
      "後端：",
      "1. 使用 WebScoket 作為 sinaling server，傳遞 WebRtc 的 candidate",
      "2. 以 websocket 為基礎，實作即時通訊聊天室",
      "3. 建立 restful api endpoint 回傳 client 所需之靜態資源"
    ],
    [
      "前端：",
      "1. 主要目標在於處理 WebRtc 的實作，因此前端以原生為主",
      "2. 以原生JS Proxy 物件為基礎，進行聊天框的渲染",
      "3. 使用 webRtc 進行`點對點的視訊連接`，能以一對多的方式進行視訊連接"
    ]
  ]
}